# coding: utf-8
# Prerequisite: sudo easy_install regex
# from __future__ import unicode_literals
# import unicodedata
import regex
import re
import sys
import collections
  
word_count = collections.Counter()
test_lines = ['रुष	(१४२८) {@“रुष हिंसार्थः”@} (१-भ्वादिः-६९३। सक। सेट्। पर।) ‘शपि रोषति हिंसायाम्, रोषे रुष्यति रोषयेत्।।’ (श्लो। १७९) इति देवः। रोषकः-षिका, रोषकः-षिका, रुरोषिषकः-रुरुषिषकः-षिका, रोरुषकः-षिका;\\n\\n  [[१। ‘तीषसहलुभरुषरिषः’ (७-२-४८) इति तकारादावार्धधातुके इड्विकल्पः। इडभाव- पक्षे ‘ष्टुना ष्टुः’ (८-४-४१) इति ष्टुत्वेन टकारः।]] रोषिता-रोष्टा [[आ। ‘रेष्टारं रेषितं व्यास्यत् रोष्टाऽक्षः शस्त्रसंहतीः।।’ भ। का। ९। ३१।]] -ष्ट्री, रोषयिता-त्री, रुरोषिषिता-रुरुषिषिता-त्री, रोरुषिता-त्री;\\n\\n  इत्यादीनि समस्तान्यपि रूपाणि भौवादिकरेषतिवत् (१४०८) बोध्यानि। [[२। ‘रुष्यमत्वरसंघुषास्वनाम्’ (७-२-२८) इतीड्विकल्पः। धातोरस्य तकारादावार्ध- धातुके इड्विकल्पस्य विधानात् ‘यस्य विभाषा’ (७-२-१५) इति निष्ठायामिण्निषेघे प्राप्ते इड्विकल्पविधानमिति बोध्यम्। अत्र ‘मतिबुद्धिपूजार्थेभ्यश्च’ (३-२-१२८) इत्यत्र चकारस्यानुक्तसमुच्चयार्थकत्वमाश्रित्य वर्तमाने कर्तरि क्तप्रत्ययः। न्यासे (७-२-२८) ‘रुष रोषे’ इत्यस्माण्निष्ठायामिड्विकल्पस्य प्रतिंपादनात्, तत्रोपयोगाभावात्, दैवादिकस्य रोषार्थकस्य अत्र सूत्रे (७-२-२८) ग्रहणं न्यास- कारसम्मतमिति प्रतिभाति।]] रुष्टः- [[B। ‘जघान रुषितो रुष्टान् त्वरितस्तूर्णमागतान्।।’ भ। का। ९। २०।]] रुषितः, [[३। ‘उदुपधाद् भावादिकर्मणोरन्यतरस्याम्’ (१-२-२१) इति भावे आदिकर्मणि च कित्त्वविकल्पोऽत्र।]] रुषितमनेन, रोषितं वा, [[४। नन्द्यादेः (३-१-१३४) आकृतिगणत्वेन कर्तरि ल्युप्रत्ययोऽत्रेति ज्ञेयम्।]] रोषणः, [[५। ‘उपमाने कर्मणि च’ (३-४-४५) इति उपमानकर्तरि णमुल्। ‘कषादिषु--’ (३-४-४६) इति यथाविध्यनुप्रयोगः। गृध्र इव हिनस्तीत्यर्थः।]] गृध्ररोषं रोषति इतीमान्यस्माद् भवन्तीति विशेषः।', "अकि	२) {@“अकि लक्षणे”@} (भ्वादिः-१-८७। सक-सेट्-आत्मनेपदी।) लक्षणं = चिह्रम्। ‘इदितस्त्वङ्कते तत्र कुटिलायां गतावकेत्।’ (श्लो ४१) इति देवः। अ [[३। ‘इदितो नुम् धातोः’ (७-१-५८) इति नुम्।]] ङ्ककः--ङ्किका, अङ्ककः-किका, [[४। ‘न न्द्राः संयोगादयः’ (६-१-३) इति नकारस्य द्वित्वनिषेधः। ‘कुहोश्चुः’ (७-४-६२) इत्यभ्यासस्य चकारः।।]] अञ्चिकिषकः--षिका;\n\n  अङ्किता-त्री, अङ्कयिता-त्री, अञ्चिकिषिता-त्री;\\n\\n  अङ्कयन्-न्ती, अङ्कयिष्यन्-न्ती-ती;\\n\\n  अङ्कमानः, अङ्कयमानः, अञ्चिकिषमाणः;\\n\\n  अङ्किष्यमाणः, अङ्कयिष्यमाणः, अञ्चिकिषिष्यमाणः;\\n\\n  अन् [[५। ‘संयोगान्तस्य लोपः’ (८-२-२३)।]] -अङ्कौ-अङ्कः;\\n\\n  अङ्कितः- [[B। ‘फलाङ्कितान् वङ्कितवल्लिमङ्कितान् वनप्रदेशान् उरुकाककोकिलान्’ धा-का। १-१३।]] तं, अङ्कितः-तम्-तवान्, अञ्चिकिषितः-तवान्;\\n\\n  अङ्कः, अङ्कः, अञ्चिकिषुः, अञ्चिकयिषुः;\\n\\n  अङ्कितव्यम्, अङ्कयितव्यम्, अञ्चिकिषितव्यम्;\\n\\n  अङ्कनीयम्, अङ्कनीयम्, अञ्चिकिषणीयम्;\\n\\n  अङ्क्यम्, अङ्क्यम्, अञ्चिकिष्यम्;\\n\\n  ईषदङ्कः-दुरङ्कः-स्वङ्कः;\\n\\n  [[६। इदित्त्वात् ‘अनिदितां’ (६-४-२४) इति नलोपो न।]] अङ्क्यमानः, अङ्क्यमानः, अञ्चिकिष्यमाणः;\\n\\n  [पृष्ठम्०००५+ २९] अङ्कः, पर्यङ्कः- [[१। ‘परेश्च घाङ्कयोः’ (८-२-२२) इति लत्वं वा। मञ्च इत्यर्थः।]] पल्यङ्कः, अङ्कः, अञ्चिकिषः;\\n\\n  अङ्कितुम्, अङ्कयितुम्, अञ्चिकिषितुम्;\\n\\n  अङ्का [[२। ‘गुरोश्च हलः’ (३-३-१०३) इति स्त्रियां अक्दमप्रत्ययः।]], अङ्कना, अञ्चिकिषा, अञ्चिकयिषा;\\n\\n  अङ्कनम्, [[३। ‘इजादेस्सनुमः’ (८-४-३२) इति नियमात् णत्वं न।]] प्राङ्कनम् अङ्कनम्, अञ्चिकिषणम्;\\n\\n  अङ्कित्वा, अङ्कयित्वा, अञ्चिकिषित्वा;\\n\\n  समङ्क्य, समङ्क्य, समञ्चिकिष्य;\\n\\n  अङ्कमङ्कम् २ अङ्कित्वा २, अङ्कम् २, अङ्कयित्वा २, अञ्चिकिषम्;\\n\\n  २ अञ्चिकिषित्वा;\\n\\n  २ अङ्कुरः [[४। औणादिक उरच्।]];\\n\\n"]
for line in sys.stdin:
# for line in test_lines:
  try:
    (head, value) = line.split("\t")
    headword_str = value
    headword_str = regex.sub(" *\(.+?\) *", "", headword_str, flags=regex.UNICODE)
    headword_str = regex.sub(" *{@.+?@} *", "", headword_str, flags=regex.UNICODE)
    headword_str = regex.sub(" *{.+?} *", "", headword_str, flags=regex.UNICODE)
    headword_str = regex.sub(" *\[\[.+?\]\] *", "", headword_str, flags=regex.UNICODE)
    headword_str = regex.sub(" *‘.+?’", "", headword_str, flags=regex.UNICODE)
    headword_str = regex.sub(" *इति.+?। *", "", headword_str, flags=regex.UNICODE)
    headword_str = regex.sub("१|२|३|४|५|६|७|८|९|०", "", headword_str, flags=regex.UNICODE)
    headword_str = regex.sub("\\\\n", "", headword_str, flags=regex.UNICODE)
    headword_str = regex.sub(" *-+", "-", headword_str, flags=regex.UNICODE)
    headword_str = regex.sub(" *,", ",", headword_str, flags=regex.UNICODE)
    headword_str = regex.sub(" *;", ";", headword_str, flags=regex.UNICODE)
    # print headword_str
    headwords = regex.findall(r"([^ ;,]+?)[,;]", headword_str, flags=re.UNICODE)
    headwords = filter(lambda headword : headword != "", headwords)
    headwords = filter(lambda headword : headword != head, headwords)
    headwords = map(lambda headword : regex.sub("ं$", "म्", headword, flags=regex.UNICODE), headwords)
    headwords = list(set(headwords))
    headwords = [head] + headwords
    print "|".join(headwords) + "\n" + value.strip().replace("\\n", "<br>") + "\n"
  except ValueError:
    print line
    break
   

